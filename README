
hxNode provides haxe wrappers to Node.js. 

My goal is to provide haxe with a first class server environment using Node.js as the
basis.

haxe has an existing javascript target, however, it is currently targeted at client side
javascript and so the base files require tweaking. Also, the current haxe filesystem API
is synchronous so I'm using the node.js synchronous functions to implement js.FileSystem and 
hopefully the other standard haxe APIs.

Therefore, to keep installation as straightforward as possible, I'm bundling the entire
haxe js subdirectory with all the changes for the cases noted above. The base node API is
in js/Node.hs.

The current js mode features should work just the same, so the bundled js directory can
replace the existing haXe std library js dir. However, you don't even require to do the
replacement, haxe should find the bundled js dir first anyway. If you have doubts about
what's being compiled try -v during compile and haxe will show you where it's getting it's
files from.

Status
------

The base Node API is in js/Node.hx. 

API is now at 0.1.91  

Note, I haven't wrapped DNS, Assert or REPL.

Started js synchronous API (using existing neko API where I can)
        js/FileSystem.hx
        js/Sys.hx
        todo io/*, web

Compiling with haxe
-------------------

You must add  -D nodejs to the compile line. 

From the top directory

haxe -cp . -D nodejs -js main.js -main tests.Main 

to compile main.js

and then to execute

node main.js

Compiling with haxed (a haxe package build, deploy and install tool)
--------------------------------------------------------------------

haxed build nodejs

Utilities and Examples
----------------------

In the bdog dir you'll find some utilities and code that uses the haXe
node API. For example Servlet.hx ....


 public static function
  makeGetUsersServlet() {
    var users = new JSONP(GETUSERS,function(req:IRequest,res:String->Void) {
        var
        session = field(req.validated,SESSID),
        page = Std.parseInt(field(req.params,PAGE)),
        rows = Std.parseInt(field(req.params,ROWS));

        if (Accounts.roleTrumps(MANAGER,session.role)) {
          Accounts.usersByPage(page,rows).addCallback(function(users) {
            res(reply(OK,{users:users}));
            });
        } else {
          res(reply(PERMISSIONS));
        }
      });
    users.required([SESSID,PAGE,ROWS]);
    users.validate(SESSID,NO_SESSION,Accounts.validateSession);
  }

create your servlets then fire up the server, e.g.

 new HttpServer(accountServer.host,accountServer.port,"Accounts 0.1");

I like to use enums for param and servlet names so i can guarantee i get the spelling right in client haxe too, this may not be to everyone's taste - the nice thing is it's small and easy to change.

